pipeline {
    agent any
    
    tools {
        // Docker tool must be configured in Jenkins (Manage Jenkins -> Tools -> Docker)
    }
    
    environment {
        APP_NAME = "musicvibe"
        DOCKER_IMAGE = "temitayocharles/musicvibe"
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_URL = "http://nexus-sonarqube.musicvibe-services.local:9000"
    }
    
    stages {
        
        stage('Git Checkout') {
            steps {
                git branch: 'main', 
                    credentialsId: 'git-cred',
                    url: 'https://github.com/temitayocharles/musicvibe-cicd-project.git'
            }
        }
        
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonar-scanner'
                    withSonarQubeEnv('sonar-server') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=MusicVibe \
                            -Dsonar.projectName=MusicVibe \
                            -Dsonar.sources=apps/api/src,apps/frontend/src \
                            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.test.ts,**/*.spec.ts \
                            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh """
                            docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                                         -t ${DOCKER_IMAGE}:latest .
                        """
                    }
                }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh """
                    trivy image --format table \
                         -o trivy-image-report.html \
                         ${DOCKER_IMAGE}:${DOCKER_TAG}
                """
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh """
                            docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                            docker push ${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '',
                    credentialsId: 'k8-cred', 
                    namespace: 'musicvibe', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://172.31.8.146:6443'
                ) {
                    sh """
                        kubectl apply -f kubernetes/musicvibe-deployment.yaml
                        kubectl set image deployment/musicvibe \
                            musicvibe=${DOCKER_IMAGE}:${DOCKER_TAG} \
                            -n musicvibe
                        kubectl rollout status deployment/musicvibe -n musicvibe --timeout=5m
                    """
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig(
                    caCertificate: '', 
                    clusterName: 'kubernetes', 
                    contextName: '',
                    credentialsId: 'k8-cred', 
                    namespace: 'musicvibe', 
                    restrictKubeConfigAccess: false, 
                    serverUrl: 'https://172.31.8.146:6443'
                ) {
                    sh """
                        echo '=== Deployment Status ==='
                        kubectl get deployment musicvibe -n musicvibe
                        
                        echo '=== Pod Status ==='
                        kubectl get pods -n musicvibe -l app=musicvibe
                        
                        echo '=== Service Status ==='
                        kubectl get svc musicvibe-service -n musicvibe
                        
                        echo '=== Health Check ==='
                        sleep 10
                        POD_NAME=\$(kubectl get pods -n musicvibe -l app=musicvibe -o jsonpath='{.items[0].metadata.name}')
                        kubectl exec -n musicvibe \$POD_NAME -- curl -s http://localhost:4000/health || echo 'Health check pending...'
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
                
                def body = """
                <html>
                <body>
                    <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                        <h2>${jobName} - Build ${buildNumber}</h2>
                        <div style="background-color: ${bannerColor}; padding: 10px;">
                            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                        </div>
                        <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                        <h3>MusicVibe Application Details:</h3>
                        <ul>
                            <li>Docker Image: ${DOCKER_IMAGE}:${DOCKER_TAG}</li>
                            <li>Application: Node.js 20 + TypeScript + React</li>
                            <li>Namespace: musicvibe</li>
                            <li>Port: 4000</li>
                        </ul>
                    </div>
                </body>
                </html>
                """
                
                emailext (
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'your-email@example.com',
                    from: 'jenkins@example.com',
                    replyTo: 'jenkins@example.com',
                    mimeType: 'text/html',
                    attachmentsPattern: 'trivy-image-report.html'
                )
            }
            cleanWs()
        }
        success {
            echo 'SUCCESS: Pipeline succeeded! MusicVibe deployed successfully.'
        }
        failure {
            echo 'ERROR: Pipeline failed. Check logs for details.'
        }
    }
}
