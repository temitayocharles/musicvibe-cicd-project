name: MusicVibe CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  DOCKER_IMAGE: temitayocharles/musicvibe
  NODE_VERSION: '20'

jobs:
  setup:
    name: Setup and Generate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate Version
        id: version
        run: |
          VERSION="${GITHUB_SHA::7}-$(date +%Y%m%d-%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install Dependencies
        run: |
          npm ci
          npm ci --workspace=apps/api
          npm ci --workspace=apps/frontend
      - name: Type Check (API)
        run: npx tsc --noEmit --project apps/api/tsconfig.json
      - name: Type Check (Frontend)
        run: npx tsc --noEmit --project apps/frontend/tsconfig.json

  security-scan:
    name: Security Scan (Filesystem)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build MusicVibe Application
    runs-on: ubuntu-latest
    needs: [setup, lint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install Dependencies
        run: |
          npm ci
          npm ci --workspace=apps/api
          npm ci --workspace=apps/frontend
      - name: Build Frontend
        run: npm run build --workspace=apps/frontend
      - name: Build API
        run: npm run build --workspace=apps/api
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/api/dist/
            apps/api/src/public/
          retention-days: 1

  docker:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: apps/api/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.version }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy Image Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [setup, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: apps/api/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Multi-Arch Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ needs.setup.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [setup, push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/musicvibe-deployment.yaml
          kubectl rollout status deployment/musicvibe -n musicvibe --timeout=300s
      - name: Verify Deployment
        run: |
          kubectl get pods -n musicvibe
          kubectl get svc -n musicvibe

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      - name: Run Health Check Script
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [setup, lint, build, docker, push, deploy, health-check]
    if: always()
    steps:
      - name: Check Job Status
        id: check
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi
      - name: Send Notification
        run: |
          echo "Pipeline ${{ steps.check.outputs.status }}"
          echo "Version: ${{ needs.setup.outputs.version }}"
